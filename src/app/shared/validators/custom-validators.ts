import { AbstractControl, ValidatorFn } from '@angular/forms';

/**
 * Validador customizado para garantir que os campos de senha e confirma√ß√£o coincidam.
 * Ele deve ser aplicado no n√≠vel do FormGroup (no objeto de valida√ß√£o de FormBuilder.group).
 * @param senhaName O nome do campo principal da senha (ex: 'senha' ou 'novaSenha').
 * @param confirmName O nome do campo de confirma√ß√£o da senha (ex: 'confirmacaoSenha').
 */
export const passwordMatchValidator = (senhaName: string, confirmName: string): ValidatorFn => {
  return (control: AbstractControl): { [key: string]: boolean } | null => {
    
    // üö® CORRE√á√ÉO: Usa os nomes dos campos passados como par√¢metros
    const senha = control.get(senhaName);
    const confirmacaoSenha = control.get(confirmName);

    // Retorna nulo se os campos n√£o existirem (erro de digita√ß√£o) ou se o formul√°rio for nulo.
    if (!senha || !confirmacaoSenha) {
      return null;
    }

    // Se o valor do campo de confirma√ß√£o for nulo (vazio) ou intocado, n√£o valida
    // A valida√ß√£o de required j√° √© feita no FormControl
    if (!confirmacaoSenha.value || confirmacaoSenha.pristine) {
      return null;
    }
    
    // Verifica se a senhas s√£o diferentes
    if (senha.value !== confirmacaoSenha.value) {
      // Define o erro 'senhasDiferentes' no FormControl para o feedback visual
      confirmacaoSenha.setErrors({ ...confirmacaoSenha.errors, senhasDiferentes: true });
      
      // Retorna o erro no n√≠vel do FormGroup (opcional, mas recomendado)
      return { 'senhasDiferentes': true };
    } 
    
    // Se forem iguais, garante que o erro customizado seja removido
    if (confirmacaoSenha.hasError('senhasDiferentes')) {
      const errors = { ...confirmacaoSenha.errors };
      delete errors['senhasDiferentes'];
      // Define os erros restantes ou null
      confirmacaoSenha.setErrors(Object.keys(errors).length > 0 ? errors : null);
    }
    
    return null; // A valida√ß√£o √© bem-sucedida
  };
};
